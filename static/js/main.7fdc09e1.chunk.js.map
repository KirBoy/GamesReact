{"version":3,"sources":["components/Home.jsx","components/Pytnashki/PytnashkiResult.jsx","components/Pytnashki/Pytnashki.jsx","redux/pytnashki-reducer.js","components/Pytnashki/PytnashkiCpntainer.jsx","components/Memory Game/MemoryResult.jsx","components/Memory Game/MemoryGame.jsx","redux/memoryGame-reducer.js","components/Memory Game/MemoryGameContainer.jsx","components/InOrder/InOrder.jsx","redux/inOrder-reducer.js","components/InOrder/InOrderContainer.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["Home","className","to","PytnashkiResult","props","onClick","playAgain","initInner","Pytnashki","state","sec","min","touches","bestTime","bestTouches","list","React","createRef","this","timerID","setInterval","setState","nextProps","nextState","nextContext","cards","pytnashki","map","el","i","filter","item","pos","length","reduce","previousValue","currentValue","gameComplited","gameStarted","timer","j","undefined","current","childNodes","push","getAttribute","split","JSON","stringify","result","gameResult","clearInterval","e","position","nativeEvent","path","y","target","parentElement","x","inner","innerHTML","children","moveCard","classList","add","remove","error","prevProps","cardsInner","countDone","ref","move","row","exact","Component","Item","ItemPosition","key","src","alt","PLAY_AGAIN","GAME_DONE","INIT_INNER","MOVE_CARD","PYTNASHKI_STARTED","initialState","pytnashkiReducer","action","type","sort","Math","random","forEach","a","Object","keys","connect","dispatch","MemoryResult","rebutGame","Card","card","MemoryGame","couple","mistakes","bestMistakes","help","memoryGame","console","log","mass","every","active","parentNode","contains","firstEl","secondEl","number","audio","Audio","volume","autoplay","setTimeout","done","bind","flip","onMouseOver","onMouseOut","helpCancel","PLAY_MEMORY","GAME_COMPLITED","GAME_STARTED","memoryGameReducer","InOrder","startGame","tagName","value","inOrder","cardsTimer","time","onclick","onmousedown","addClass","onmouseup","removeClass","onmouseout","gameResolved","levelUP","clearTimeout","rebootGame","level","class","timerCardID","prevState","snapshot","START_INORDER","GAME_FAILED","GAME_RESOLVED","START_AGAIN","REB00T_GAME","LEVEL_UP","gameFailed","inOrderReducer","newMassAgain","resultAgain","newMass","App","basename","process","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7fdc09e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink} from \"react-router-dom\";\r\nimport './style.css'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n\r\n        <div className=\"main__inner\">\r\n            <h1 className=\"title\">Выбери игру</h1>\r\n            <ul className=\"list\">\r\n                <div className=\"choice\">\r\n                    <NavLink to={'/memorygame/'}>\r\n                        Найди пару\r\n                    </NavLink>\r\n                </div>\r\n                <div className=\"choice\">\r\n                    <NavLink to={'/pytnashki/'}>\r\n                        Пятнашки\r\n                    </NavLink>\r\n                </div>\r\n                <div className=\"choice\">\r\n                    <NavLink className='name' to={'/inorder/'}>\r\n                        По порядку\r\n                    </NavLink>\r\n                </div>\r\n            </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Home;","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst PytnashkiResult = (props) => {\r\n\r\n    const again = () => {\r\n        props.playAgain()\r\n        props.initInner()\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <p className=\"result__text\">Ты прошел игру</p>\r\n            <div>\r\n                <button className=\"again\" onClick={() => again()}>Начать заново.</button>\r\n                <NavLink to={'/'}>\r\n                    home\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport  default  PytnashkiResult;","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport './../style.css'\r\n\r\nimport PytnashkiResult from \"./PytnashkiResult\";\r\n\r\nclass Pytnashki extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.list = React.createRef()\r\n        this.props.playAgain()\r\n        this.props.initInner()\r\n    }\r\n\r\n    state = {\r\n        sec: 0,\r\n        min: 0,\r\n        touches: 0,\r\n        bestTime: null,\r\n        bestTouches: null,\r\n    }\r\n\r\n    timer() {\r\n        this.timerID = setInterval(() => {\r\n            if (this.state.sec === 59) {\r\n                this.setState({\r\n                    sec: 0,\r\n                    min: this.state.min + 1\r\n                })\r\n            }\r\n            this.setState({\r\n                sec: this.state.sec + 1\r\n            })\r\n        }, 1000)\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n\r\n        let cards = nextProps.pytnashki.cards;\r\n        let mass = cards.map((el, i) => {\r\n            return cards.filter((item, pos) => {\r\n                return cards[i + 1 + pos] < el\r\n            }).length\r\n        })\r\n        if (mass.reduce((previousValue, currentValue) => previousValue + currentValue) % 2 !== 0) {\r\n            this.props.playAgain()\r\n            return true\r\n        }\r\n        if (nextProps.pytnashki.gameComplited) {\r\n            if (this.state.bestTouches === null || this.state.bestTouches > this.state.touches && this.state.bestTime[0] * 60 + this.state.bestTime[1] > this.state.min * 60 + this.state.sec) {\r\n                this.setState({\r\n                    bestTime: [this.state.min, this.state.sec],\r\n                    bestTouches: this.state.touches,\r\n                })\r\n            }\r\n            return true\r\n        } else if (!nextProps.pytnashki.gameStarted) {\r\n            nextProps.gameStarted()\r\n            return true\r\n        } else if (this.state !== nextState) {\r\n            return true\r\n        } else if (this.props !== nextProps) {\r\n            this.setState({\r\n                sec: 0,\r\n                min: 0,\r\n                touches: 0,\r\n            })\r\n            this.timer()\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    countDone() {\r\n        let cards = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                if (this.list.current.childNodes[i].childNodes[j].childNodes[0] === undefined) {\r\n                    cards.push('')\r\n                    continue\r\n                }\r\n                cards.push(+this.list.current.childNodes[i].childNodes[j].childNodes[0].getAttribute('src').split('.')[3])\r\n            }\r\n        }\r\n\r\n        if (JSON.stringify(cards) === JSON.stringify(this.props.pytnashki.result)) {\r\n            this.props.gameResult()\r\n            clearInterval(this.timerID)\r\n        }\r\n\r\n    }\r\n\r\n    move(e) {\r\n\r\n        const position = e.nativeEvent.path\r\n        let y = e.target.parentElement.getAttribute('data-y')\r\n        let x = e.target.parentElement.getAttribute('data-x')\r\n        let inner = position[1].innerHTML.split('.')[3]\r\n        try {\r\n            if (position[3].children[y - 2].children[x - 1].innerHTML === '') {\r\n                this.props.moveCard({\r\n                    [y + '' + x]: null,\r\n                    [y - 1 + '' + x]: +inner\r\n                })\r\n                position[1].classList.add('last');\r\n                position[3].children[y - 2].children[x - 1].classList.remove('last');\r\n                this.setState({\r\n                    touches: this.state.touches + 1\r\n                })\r\n            }\r\n        } catch (error) {\r\n        }\r\n\r\n        try {\r\n            if (position[3].children[y].children[x - 1].innerHTML === '') {\r\n                this.props.moveCard({\r\n                    [y + '' + x]: null,\r\n                    [(+y + 1) + '' + x]: +inner\r\n                })\r\n                position[1].classList.add('last');\r\n                position[3].children[y].children[x - 1].classList.remove('last');\r\n                this.setState({\r\n                    touches: this.state.touches + 1\r\n                })\r\n            }\r\n        } catch (error) {\r\n        }\r\n\r\n        try {\r\n            if (position[2].children[x].innerHTML === '') {\r\n                this.props.moveCard({\r\n                    [y + '' + x]: null,\r\n                    [y + '' + (+x + 1)]: +inner\r\n                })\r\n                position[1].classList.add('last');\r\n                position[2].children[x].classList.remove('last');\r\n                this.setState({\r\n                    touches: this.state.touches + 1\r\n                })\r\n            }\r\n        } catch (error) {\r\n        }\r\n\r\n        try {\r\n            if (position[2].children[x - 2].innerHTML === '') {\r\n                this.props.moveCard({\r\n                    [y + '' + x]: null,\r\n                    [y + '' + x - 1]: +inner\r\n                })\r\n                position[1].classList.add('last');\r\n                position[2].children[x - 2].classList.remove('last');\r\n                this.setState({\r\n                    touches: this.state.touches + 1\r\n                })\r\n            }\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n        if (this.props.pytnashki.cardsInner !== prevProps.pytnashki.cardsInner) {\r\n            this.countDone()\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <><h2>Расположи плитки в порядке возрастания</h2>\r\n                {this.props.pytnashki.gameComplited ?\r\n                    <PytnashkiResult playAgain={this.props.playAgain} initInner={this.props.initInner}/> : null}\r\n                <ul className=\"list display-block\" ref={this.list} onClick={(e) => this.move(e)}>\r\n                    {this.props.pytnashki.row.map((el, i) => <Item key={i} y={el} row={this.props.pytnashki.row}\r\n                                                                   cardsInner={this.props.pytnashki.cardsInner}/>)}\r\n                </ul>\r\n                <NavLink className='home-main' exact to={'/'}>\r\n                    home\r\n                </NavLink>\r\n\r\n                <div className=\"time\">\r\n                    <span>Время</span>\r\n                    <span>{this.state.min}:</span><span>{this.state.sec < 10 ? '0' + this.state.sec : this.state.sec}</span>\r\n                </div>\r\n                {/*<span>{this.state.touches}</span>*/}\r\n                <div>\r\n                    <span>{this.state.bestTime}</span>\r\n                    <span> {this.state.bestTouches}</span>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst Item = (props) => {\r\n\r\n    return (\r\n        <li className=\"row\">\r\n            {props.row.map((el, i) => <ItemPosition key={i} y={props.y} x={el} cardsInner={props.cardsInner}/>)}\r\n        </li>\r\n    )\r\n}\r\n\r\nconst ItemPosition = (props) => {\r\n\r\n    let key = props.y + '' + props.x\r\n    let path = '../numbers/img.' + props.cardsInner[key] + '.png';\r\n    return (\r\n        <div className=\"number\" data-y={props.y} data-x={props.x}>\r\n            {props.cardsInner[key] && <img className=\"card\" src={path} data-y={props.y} data-x={props.x} alt={path}>\r\n            </img>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pytnashki;","const PLAY_AGAIN = 'PLAY_AGAIN';\r\nconst GAME_DONE = 'GAME_DONE';\r\nconst INIT_INNER = 'INIT_INNER';\r\nconst MOVE_CARD = 'MOVE_CARD';\r\nconst SET_GAME = 'SET_GAME';\r\nconst PYTNASHKI_STARTED = 'PYTNASHKI_STARTED';\r\n\r\nconst initialState = {\r\n    cards: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ''],\r\n    row: [1, 2, 3, 4],\r\n    result: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ''],\r\n    cardsInner: {\r\n        11: null,\r\n        12: null,\r\n        13: null,\r\n        14: null,\r\n        21: null,\r\n        22: null,\r\n        23: null,\r\n        24: null,\r\n        31: null,\r\n        32: null,\r\n        33: null,\r\n        34: null,\r\n        41: null,\r\n        42: null,\r\n        43: null,\r\n        44: null,\r\n    },\r\n    gameComplited: false,\r\n    gameStarted: false\r\n};\r\n\r\nconst pytnashkiReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case PLAY_AGAIN:\r\n            return {...state, cards: state.cards.sort(() => Math.random() - 0.5), gameComplited: false}\r\n\r\n        case INIT_INNER:\r\n            let cardsInner = state.cardsInner\r\n\r\n            state.cards.forEach((el, i) => {\r\n                let a = i\r\n                let key = Object.keys(state.cardsInner)[a]\r\n                cardsInner[key] = el\r\n            })\r\n            return {...state, cardsInner: cardsInner}\r\n\r\n        case GAME_DONE:\r\n            return {...state, gameComplited: true}\r\n\r\n        case MOVE_CARD:\r\n            return {...state, cardsInner: {...state.cardsInner, ...action.cards}}\r\n\r\n        case PYTNASHKI_STARTED:\r\n            return {...state, gameStarted: !state.gameStarted}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const playAgain = () => ({type: PLAY_AGAIN});\r\nexport const initInner = () => ({type: INIT_INNER});\r\nexport const moveCard = (cards) => ({type: MOVE_CARD, cards});\r\nexport const gameResult = () => ({type: GAME_DONE});\r\nexport const gameStarted = () => ({type: PYTNASHKI_STARTED});\r\n\r\nexport default pytnashkiReducer;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Pytnashki from \"./Pytnashki\";\r\nimport {gameResult, gameStarted, initInner, moveCard, playAgain} from \"../../redux/pytnashki-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        pytnashki: state.pytnashki,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return ({\r\n        playAgain: () => {\r\n            dispatch(playAgain());\r\n        },\r\n        gameResult: () => {\r\n            dispatch(gameResult())\r\n        },\r\n        initInner: () => {\r\n            dispatch(initInner())\r\n        },\r\n        moveCard: (cards) => {\r\n            dispatch(moveCard(cards))\r\n        },\r\n        gameStarted: (cards) => {\r\n            dispatch(gameStarted(cards))\r\n        }\r\n    })\r\n}\r\n\r\nconst PytnashkiContainer = (props) => {\r\n    return (\r\n        <Pytnashki pytnashki={props.pytnashki} playAgain={props.playAgain} gameResult={props.gameResult}\r\n                   initInner={props.initInner} moveCard={props.moveCard} gameStarted={props.gameStarted}/>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PytnashkiContainer);\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport '../style.css'\r\n\r\nconst MemoryResult = (props) => {\r\n\r\n\r\n    const again = () => {\r\n        props.playAgain()\r\n        props.rebutGame()\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <p className=\"result__text\">Ты прошел игру</p>\r\n            <div>\r\n                <button className=\"again\" onClick={() => again()}>Начать заново.</button>\r\n                <NavLink to={'/'}>\r\n                    home\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default MemoryResult;","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport '../style.css'\r\nimport MemoryResult from \"./MemoryResult\";\r\n\r\nclass MemoryGame extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.list = React.createRef();\r\n        this.props.playAgain()\r\n    }\r\n\r\n    state = {\r\n        sec: 0,\r\n        min: 0,\r\n        cards: [],\r\n        couple: [],\r\n        mistakes: 0,\r\n        bestTime: null,\r\n        bestMistakes: null,\r\n        help: false\r\n    }\r\n\r\n    timer() {\r\n        this.timerID = setInterval(() => {\r\n            if (this.state.sec === 59) {\r\n                this.setState({\r\n                    sec: 0,\r\n                    min: this.state.min + 1\r\n                })\r\n            }\r\n            this.setState({\r\n                sec: this.state.sec + 1\r\n            })\r\n        }, 1000)\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n\r\n        if (nextProps.memoryGame.gameComplited) {\r\n            if (this.state.bestMistakes === null || this.state.bestMistakes > this.state.mistakes && this.state.bestTime[0] * 60 + this.state.bestTime[1] > this.state.min * 60 + this.state.sec) {\r\n                this.setState({\r\n                    bestTime: [this.state.min, this.state.sec],\r\n                    bestMistakes: this.state.mistakes,\r\n                })\r\n            }\r\n            console.log(this.state)\r\n            return true\r\n        } else if (!nextProps.memoryGame.gameStarted) {\r\n\r\n            nextProps.gameStarted()\r\n            this.timer()\r\n            return true\r\n        } else if (this.state !== nextState) {\r\n\r\n\r\n            return true\r\n        } else if (this.props !== nextProps) {\r\n            this.setState({\r\n                sec: 0,\r\n                min: 0,\r\n                cards: [],\r\n                couple: [],\r\n                mistakes: 0,\r\n            })\r\n\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    flip(e) {\r\n        if (e.target.className === 'front') {\r\n            let inner = e.target.parentElement.childNodes[1].innerHTML\r\n\r\n            this.state.cards.forEach((el, i) => {\r\n\r\n                if (el[2] === true && el[0] === e.target) {\r\n                    console.log(1)\r\n                    let mass = [...this.state.cards]\r\n                    mass[i] = [e.target, inner, false]\r\n                    this.setState({\r\n                        cards: mass\r\n                    })\r\n                }\r\n            })\r\n\r\n            if (this.state.cards.every(el => el[0] !== e.target)) {\r\n                console.log(2)\r\n                this.setState({\r\n                    cards: [...this.state.cards, [e.target, inner, true]]\r\n                })\r\n            }\r\n\r\n            this.state.cards.forEach((el) => {\r\n\r\n                if (el[1] === inner && el[0] !== e.target) {\r\n                    this.setState({\r\n                        couple: [...this.state.couple, inner]\r\n                    })\r\n                }\r\n            })\r\n\r\n            let active = [];\r\n\r\n            for (let i = 0; i < 16; i++) {\r\n                if (e.target.parentNode.parentNode.parentNode.childNodes[i].childNodes[0].classList.contains('active')) {\r\n                    active.push(i)\r\n                }\r\n            }\r\n\r\n            if (active.length === 1 || active.length === 0) {\r\n                e.target.parentNode.classList.add(('active'))\r\n                active = []\r\n                for (let i = 0; i < 16; i++) {\r\n                    if (e.target.parentNode.parentNode.parentNode.childNodes[i].childNodes[0].classList.contains('active')) {\r\n                        active.push(i)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (active.length === 2) {\r\n                let firstEl = e.target.parentNode.parentNode.parentNode.childNodes[active[0]].childNodes[0].childNodes[1];\r\n                let secondEl = e.target.parentNode.parentNode.parentNode.childNodes[active[1]].childNodes[0].childNodes[1];\r\n                if (firstEl.innerHTML === secondEl.innerHTML) {\r\n                    let number = firstEl.childNodes[0].getAttribute('data-number');\r\n                    let audio = new Audio();\r\n                    audio.volume = 0.5;\r\n                    audio.src = `../audio/${number}.mp3`;\r\n                    audio.autoplay = true;\r\n                    e.target.parentNode.parentNode.parentNode.childNodes[active[0]].childNodes[0].classList.add('done')\r\n                    e.target.parentNode.parentNode.parentNode.childNodes[active[0]].childNodes[0].classList.remove('active')\r\n                    e.target.parentNode.parentNode.parentNode.childNodes[active[1]].childNodes[0].classList.add('done')\r\n                    e.target.parentNode.parentNode.parentNode.childNodes[active[1]].childNodes[0].classList.remove('active')\r\n\r\n                } else {\r\n\r\n                    this.state.couple.forEach((el) => {\r\n                        if (el === firstEl.innerHTML || el === secondEl.innerHTML) {\r\n                            this.setState({\r\n                                mistakes: this.state.mistakes + 1\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                    this.state.cards.forEach((el) => {\r\n                        console.log(el[0], secondEl.parentElement.childNodes[0], firstEl.parentElement.childNodes[0], el[0] === secondEl.parentElement.childNodes[0], this.state.cards)\r\n                        if (el[0] === secondEl.parentElement.childNodes[0] && el[2] !== true) {\r\n                            this.setState({\r\n                                mistakes: this.state.mistakes + 1\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                    setTimeout(() => {\r\n                        e.target.parentNode.parentNode.parentNode.childNodes[active[0]].childNodes[0].classList.remove('active')\r\n                        e.target.parentNode.parentNode.parentNode.childNodes[active[1]].childNodes[0].classList.remove('active')\r\n\r\n                    }, 800)\r\n                }\r\n            }\r\n\r\n\r\n            this.countDone(e)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    countDone(e) {\r\n        let done = 0;\r\n        for (let i = 0; i < 16; i++) {\r\n            if (e.target.parentNode.parentNode.parentNode.childNodes[i].childNodes[0].classList.contains('done')) {\r\n                done++\r\n            }\r\n        }\r\n\r\n        if (done === 16) {\r\n            this.props.gameResult()\r\n            this.setState({\r\n                timer: false\r\n            })\r\n            clearInterval(this.timerID)\r\n        }\r\n    }\r\n\r\n    rebutGame() {\r\n        this.list.current.childNodes.forEach((el) => el.childNodes[0].className = 'flipper')\r\n    }\r\n\r\n    help() {\r\n        this.setState({\r\n            help: true\r\n        })\r\n    }\r\n\r\n    helpCancel() {\r\n        this.setState({\r\n            help: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.gameStarted()\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <><h2>Найди пару</h2>\r\n                <div className=\"time\">\r\n                    <span>Время</span>\r\n                    <span>{this.state.min}:</span><span>{this.state.sec < 10 ? '0' + this.state.sec : this.state.sec}</span>\r\n                </div>\r\n                {this.props.memoryGame.gameComplited ?\r\n                    <MemoryResult playAgain={this.props.playAgain} rebutGame={this.rebutGame.bind(this)}/> : null}\r\n                <ul className=\"list list--game\" ref={this.list} onClick={(e) => this.flip(e)}>\r\n                    {this.props.memoryGame.card.map((el, i) => <Card key={i} card={el}/>)}\r\n                </ul>\r\n                <div className=\"mistakes\" onMouseOver={() => this.help()} onMouseOut={() => this.helpCancel()}>\r\n                    {/*<span>Ошибки</span>*/}\r\n                    {/*<span> {this.state.mistakes}</span>*/}\r\n                    {this.state.help &&\r\n                    <p className='help'>ошибка засчитывается в том случаее, если при выборе второй карточки,\r\n                        подней не оказывется пары и при этом вы уже видели что находилось под ней</p>}\r\n                </div>\r\n                <div>\r\n                    <span>{this.state.bestTime}</span>\r\n                    {/*<span> {this.state.bestMistakes}</span>*/}\r\n                </div>\r\n                <NavLink className='home-main' exact to={'/'}>\r\n                    home\r\n                </NavLink>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nfunction\r\n\r\nCard(props) {\r\n\r\n    let path = '../cards/' + props.card + '.png';\r\n\r\n    return (\r\n        <div className=\"item\">\r\n            <div className='flipper'>\r\n                <div className=\"front\">\r\n                </div>\r\n                <div className=\"back\">\r\n                    <img className=\"card\" data-number={props.card} src={path} alt=\"\">\r\n                    </img>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemoryGame;","const PLAY_MEMORY = 'PLAY_MEMORY';\r\nconst GAME_COMPLITED = 'GAME_COMPLITED';\r\nconst GAME_STARTED = 'GAME_STARTED';\r\n\r\nconst initialState = {\r\n    card: [3, 2, 7, 4, 3, 6, 1, 5, 4, 1, 7, 2, 8, 8, 6, 5].sort(() => Math.random() - 0.5),\r\n    gameComplited: false,\r\n    gameStarted: false\r\n};\r\n\r\n\r\nconst memoryGameReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case PLAY_MEMORY:\r\n            return {...state, card: state.card.sort(() => Math.random() - 0.5), gameComplited: false}\r\n\r\n        case GAME_COMPLITED:\r\n            return {...state, gameComplited: true, gameStarted: false}\r\n\r\n        case GAME_STARTED:\r\n            return {...state, gameStarted: !state.gameStarted}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const playAgain = () => ({type: PLAY_MEMORY});\r\nexport const gameResult = () => ({type: GAME_COMPLITED});\r\nexport const gameStarted = () => ({type: GAME_STARTED});\r\n\r\nexport default memoryGameReducer;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MemoryGame from \"./MemoryGame\";\r\nimport {gameResult, gameStarted, playAgain} from \"../../redux/memoryGame-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        memoryGame: state.memoryGame,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return ({\r\n        playAgain: () => {\r\n            dispatch(playAgain());\r\n        },\r\n        gameResult: () => {\r\n            dispatch(gameResult());\r\n        },\r\n        gameStarted: () => {\r\n            dispatch(gameStarted());\r\n        }\r\n    })\r\n}\r\n\r\nconst MemoryGameContainer = (props) => {\r\n\r\n    return (\r\n        <MemoryGame memoryGame={props.memoryGame} playAgain={props.playAgain} gameResult={props.gameResult} gameStarted={props.gameStarted}/>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemoryGameContainer);\r\n","import React from 'react'\r\nimport '../style.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nclass InOrder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        props.startGame()\r\n        this.list = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        mass: [],\r\n        number: 0\r\n    }\r\n\r\n    push(e) {\r\n        if (e.target.tagName === 'LI') {\r\n            let audio = new Audio();\r\n            audio.volume = 0.4;\r\n            audio.src = `../btn.mp3`;\r\n            audio.autoplay = true;\r\n            if (e.target.value !== this.props.inOrder.cardsTimer[this.state.number]) {\r\n                console.log('loh')\r\n            } else {\r\n                this.setState(({\r\n                    mass: [...this.state.mass, e.target.value],\r\n                    number: this.state.number + 1\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    addClass(e) {\r\n        if (e.target.tagName === 'LI') {\r\n            e.target.classList.add('in-order-pressed')\r\n        }\r\n    }\r\n\r\n    removeClass(e) {\r\n        e.target.classList.remove('in-order-pressed')\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n\r\n        if (this.props !== nextProps) {\r\n            console.log('новая игра')\r\n            let time = nextProps.inOrder.cardsTimer.length + 1\r\n            this.timerID = setTimeout(() => {\r\n                this.list.current.onclick = (e) => this.push(e)\r\n                this.list.current.onmousedown = (e) => this.addClass(e)\r\n                this.list.current.onmouseup = (e) => this.removeClass(e)\r\n                this.list.current.onmouseout = (e) => this.removeClass(e)\r\n            }, time * 1500)\r\n            this.setState({\r\n                mass: [],\r\n                number: 0\r\n            })\r\n            return true\r\n        } else if (nextState.mass.length === nextProps.inOrder.cardsTimer.length && nextState.mass.length !== 0) {\r\n            nextProps.gameResolved()\r\n            setTimeout(() => {\r\n                nextProps.levelUP()\r\n            }, 1000)\r\n            this.list.current.onclick = () => {\r\n            }\r\n            this.list.current.onmousedown = () => {\r\n            }\r\n            this.list.current.onmouseup = () => {\r\n            }\r\n            this.list.current.onmouseout = () => {\r\n            }\r\n\r\n            return false\r\n        }\r\n        return false\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timerID)\r\n        this.list.current.onclick = () => {\r\n        }\r\n        this.props.rebootGame()\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        let className = 'list';\r\n        if (this.props.inOrder.gameResolved) {\r\n            className += ' list-active';\r\n        } else {\r\n            className = 'list';\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <h2>Нажимай на плитки по порядку </h2>\r\n                <div>\r\n                    <ul className={className} ref={this.list}>\r\n                        {this.props.inOrder.cards.map((el, i) => <Card key={i} card={el}\r\n                                                                       timer={this.props.inOrder.cardsTimer}\r\n                                                                       gameResolved={this.props.inOrder.gameResolved}/>)}\r\n                    </ul>\r\n                    <span className='level'>{this.props.inOrder.level - 3}</span>\r\n                    <NavLink className='home-main' exact to={'/'}>\r\n                        home\r\n                    </NavLink>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass Card extends React.Component {\r\n\r\n    state = {\r\n        class: null,\r\n        time: null\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n\r\n        if (nextProps.gameResolved) {\r\n            return false\r\n        } else if (this.props !== nextProps) {\r\n            this.setState({\r\n                class: null,\r\n                time: null\r\n            })\r\n            for (let i = 0; i < 10; i++) {\r\n                if (nextProps.card === nextProps.timer[i]) {\r\n                    console.log(nextProps.card, nextProps.timer[i], nextProps.timer)\r\n                    this.timerCardID = setTimeout(() => {\r\n                        this.setState({\r\n                            class: 1,\r\n                            time: i + 1\r\n                        })\r\n                    }, (i + 1) * 1500)\r\n                }\r\n            }\r\n            return true\r\n        } else if (this.state !== nextState) {\r\n            return true\r\n        }\r\n\r\n\r\n        return false\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.class === 1) {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    class: 0\r\n                })\r\n            }, 1500)\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timerCardID)\r\n    }\r\n\r\n    render() {\r\n        let className = 'in-order';\r\n        if (this.state.class) {\r\n            className += ' in-order-active';\r\n        } else {\r\n            className = 'in-order';\r\n        }\r\n\r\n        return (\r\n            <li className={className} value={this.props.card}>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InOrder;","const START_INORDER = 'START_INORDER';\r\nconst GAME_FAILED = 'GAME_FAILED';\r\nconst GAME_RESOLVED = 'GAME_RESOLVED';\r\nconst START_AGAIN = 'START_AGAIN';\r\nconst REB00T_GAME = 'REB00T_GAME';\r\nconst LEVEL_UP = 'LEVEL_UP';\r\n\r\nconst initialState = {\r\n    cards: [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    cardsTimer: [],\r\n    gameFailed: false,\r\n    level: 4,\r\n    gameResolved: false,\r\n};\r\n\r\n\r\nconst inOrderReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case START_INORDER:\r\n            let mass = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5)\r\n            return {...state, cardsTimer: [mass[0], mass[1], mass[2], mass[3]]}\r\n\r\n        case REB00T_GAME:\r\n            return {...state, level: 4}\r\n\r\n        case GAME_RESOLVED:\r\n            return {...state, gameResolved: true}\r\n\r\n        case GAME_FAILED:\r\n            return {...state, gameFailed: true,}\r\n\r\n        case START_AGAIN:\r\n            let newMassAgain = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5)\r\n            let resultAgain = []\r\n            for (let i = 0; i <= state.level; i++) {\r\n                resultAgain.push(newMassAgain[i])\r\n            }\r\n            return {...state, cardsTimer: [...resultAgain], gameFailed: false, gameResolved: false}\r\n\r\n        case LEVEL_UP:\r\n            let newMass = [1, 2, 3, 4, 5, 6, 7, 8, 9].sort(() => Math.random() - 0.5)\r\n            let result = []\r\n            for (let i = 0; i <= state.level; i++) {\r\n                result.push(newMass[i])\r\n            }\r\n            return {...state, cardsTimer: [...result], level: state.level + 1, gameFailed: false, gameResolved: false}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const startGame = () => ({type: START_INORDER});\r\nexport const rebootGame = () => ({type: REB00T_GAME});\r\nexport const levelUP = () => ({type: LEVEL_UP});\r\nexport const gameResolved = () => ({type: GAME_RESOLVED});\r\n\r\nexport default inOrderReducer;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport InOrder from \"./InOrder\";\r\nimport {gameResolved, levelUP, rebootGame, startGame} from \"../../redux/inOrder-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        inOrder: state.inOrder,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return ({\r\n        rebootGame: () => {\r\n            dispatch(rebootGame())\r\n        },\r\n        startGame: () => {\r\n            dispatch(startGame())\r\n        },\r\n        levelUP: () => {\r\n            dispatch(levelUP())\r\n        },\r\n        gameResolved: () => {\r\n            dispatch(gameResolved())\r\n        }\r\n    })\r\n}\r\n\r\nconst InOrderContainer = (props) => {\r\n\r\n    return (\r\n        <InOrder inOrder={props.inOrder} startGame={props.startGame} levelUP={props.levelUP}\r\n                 rebootGame={props.rebootGame}\r\n                 gameResolved={props.gameResolved}/>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InOrderContainer);\r\n","import './App.css';\nimport React from 'react'\nimport {BrowserRouter, Route, Switch, useLocation} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport './components/style.css'\nimport PytnashkiContainer from \"./components/Pytnashki/PytnashkiCpntainer\";\nimport MemoryGameContainer from \"./components/Memory Game/MemoryGameContainer\";\nimport InOrderContainer from \"./components/InOrder/InOrderContainer\";\n\nfunction App() {\n\n    return (\n        <div className='main'>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path='/memorygame/' render={() => <MemoryGameContainer/>}/>\n                    <Route exact path='/' render={() => <Home/>}/>\n                    <Route path='/pytnashki/' render={() => <PytnashkiContainer/>}/>\n                    <Route path='/inorder/' render={() => <InOrderContainer/>}/>\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import memoryGameReducer from \"./memoryGame-reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport pytnashkiReducer from \"./pytnashki-reducer\";\r\nimport inOrderReducer from \"./inOrder-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    memoryGame: memoryGameReducer,\r\n    pytnashki: pytnashkiReducer,\r\n    inOrder: inOrderReducer,\r\n})\r\n\r\nlet store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}